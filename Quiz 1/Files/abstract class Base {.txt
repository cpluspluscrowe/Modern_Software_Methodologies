int f = 0;
public int m1() {
return 0;
}
}
class ClassA extends Base {
public int m1() {
return f;
}
}
class ClassB extends Base {
public int m1() {
return f;
}
}
class ClassC extends ClassB {
public int m1() {
return f;
}
}
1: class Main {
2:   Base x1;
void thread1() {
3: x1 = new ClassA();
4: System.out.println(x1.m1());
}
void thread2() {
5: x1 = new ClassB();
6: System.out.println(x1.m1());
}
void thread3() {
7: x1 = new ClassC();
8: System.out.println(x1.m1());
}
}
Inheritance when combined with dynamic 
binding can cause timing problems at runtime.

Error-prone constructs
- Aliasing
- Unbounded arrays
	 Buffer overflow failures can occur if no bound checking on 
arrays.
- Default input processing
	 Occur irrespective of the input.
	 The default action changes the program control flow. 
	 Malicious inputs trigger a program failure.
